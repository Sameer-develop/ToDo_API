from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# Step 1: Create FastAPI instance
app = FastAPI(title="TODO API", version="1.0")

# Step 2: Define a Task model
class Task(BaseModel):
    id: int
    title: str
    description: str = None
    completed: bool = False

# Step 3: In-memory database (a simple Python list)
tasks = []

# Step 4: Routes

# Home route
@app.get("/")
def read_root():
    return {"message": "Welcome to the TODO API!"}

# Get all tasks
@app.get("/tasks")
def get_tasks():
    return tasks

# Get a single task by ID
@app.get("/tasks/{task_id}")
def get_task(task_id: int):
    for task in tasks:
        if task["id"] == task_id:
            return task
    raise HTTPException(status_code=404, detail="Task not found")

# Add a new task
@app.post("/tasks")
def create_task(task: Task):
    tasks.append(task.dict())
    return {"message": "Task created successfully!", "task": task}

# Update a task
@app.put("/tasks/{task_id}")
def update_task(task_id: int, updated_task: Task):
    for index, task in enumerate(tasks):
        if task["id"] == task_id:
            tasks[index] = updated_task.dict()
            return {"message": "Task updated successfully!", "task": updated_task}
    raise HTTPException(status_code=404, detail="Task not found")

# Delete a task
@app.delete("/tasks/{task_id}")
def delete_task(task_id: int):
    for index, task in enumerate(tasks):
        if task["id"] == task_id:
            tasks.pop(index)
            return {"message": "Task deleted successfully!"}
    raise HTTPException(status_code=404, detail="Task not found")
